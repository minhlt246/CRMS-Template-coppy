// ========================================
// Layout Components
// ========================================

@use "sass:math";
@use "./variables" as *;
@use "./mixins" as *;

// Container
.container,
.container-fluid {
    @include make-container();
}

.container {
    @include media-breakpoint-up(sm) {
        max-width: 540px;
    }

    @include media-breakpoint-up(md) {
        max-width: 720px;
    }

    @include media-breakpoint-up(lg) {
        max-width: 960px;
    }

    @include media-breakpoint-up(xl) {
        max-width: 1140px;
    }

    @include media-breakpoint-up(xxl) {
        max-width: 1320px;
    }
}

// Row
.row {
    @include make-row();
}

// Columns
@for $i from 1 through 12 {
    .col-#{$i} {
        @include make-col($i);
    }
}

@each $breakpoint, $value in $breakpoints {
    @if $value >0 {
        @include media-breakpoint-up($breakpoint) {
            @for $i from 1 through 12 {
                .col-#{$breakpoint}-#{$i} {
                    @include make-col($i);
                }
            }
        }
    }
}

// Flexbox Utilities
.d-flex {
    @include flex();
}

.d-inline-flex {
    @include inline-flex();
}

.d-none {
    display: none !important;
}

.d-block {
    display: block !important;
}

.d-inline {
    display: inline !important;
}

.d-inline-block {
    display: inline-block !important;
}

.d-table {
    display: table !important;
}

.d-table-row {
    display: table-row !important;
}

.d-table-cell {
    display: table-cell !important;
}

@each $breakpoint, $value in $breakpoints {
    @if $value >0 {
        @include media-breakpoint-up($breakpoint) {
            .d-#{$breakpoint}-none {
                display: none !important;
            }

            .d-#{$breakpoint}-inline {
                display: inline !important;
            }

            .d-#{$breakpoint}-inline-block {
                display: inline-block !important;
            }

            .d-#{$breakpoint}-block {
                display: block !important;
            }

            .d-#{$breakpoint}-table {
                display: table !important;
            }

            .d-#{$breakpoint}-table-row {
                display: table-row !important;
            }

            .d-#{$breakpoint}-table-cell {
                display: table-cell !important;
            }

            .d-#{$breakpoint}-flex {
                @include flex();
            }

            .d-#{$breakpoint}-inline-flex {
                @include inline-flex();
            }
        }
    }
}

// Flex Direction
.flex-row {
    @include flex-direction(row);
}

.flex-column {
    @include flex-direction(column);
}

.flex-row-reverse {
    @include flex-direction(row-reverse);
}

.flex-column-reverse {
    @include flex-direction(column-reverse);
}

// Flex Wrap
.flex-wrap {
    @include flex-wrap(wrap);
}

.flex-nowrap {
    @include flex-wrap(nowrap);
}

.flex-wrap-reverse {
    @include flex-wrap(wrap-reverse);
}

// Justify Content
.justify-content-start {
    @include justify-content(flex-start);
}

.justify-content-end {
    @include justify-content(flex-end);
}

.justify-content-center {
    @include justify-content(center);
}

.justify-content-between {
    @include justify-content(space-between);
}

.justify-content-around {
    @include justify-content(space-around);
}

.justify-content-evenly {
    @include justify-content(space-evenly);
}

// Align Items
.align-items-start {
    @include align-items(flex-start);
}

.align-items-end {
    @include align-items(flex-end);
}

.align-items-center {
    @include align-items(center);
}

.align-items-baseline {
    @include align-items(baseline);
}

.align-items-stretch {
    @include align-items(stretch);
}

// Align Content
.align-content-start {
    @include align-content(flex-start);
}

.align-content-end {
    @include align-content(flex-end);
}

.align-content-center {
    @include align-content(center);
}

.align-content-between {
    @include align-content(space-between);
}

.align-content-around {
    @include align-content(space-around);
}

.align-content-stretch {
    @include align-content(stretch);
}

// Align Self
.align-self-auto {
    align-self: auto !important;
}

.align-self-start {
    align-self: flex-start !important;
}

.align-self-end {
    align-self: flex-end !important;
}

.align-self-center {
    align-self: center !important;
}

.align-self-baseline {
    align-self: baseline !important;
}

.align-self-stretch {
    align-self: stretch !important;
}

// Flex
.flex-fill {
    @include flex-fill();
}

.flex-grow-0 {
    @include flex-grow(0);
}

.flex-grow-1 {
    @include flex-grow(1);
}

.flex-shrink-0 {
    @include flex-shrink(0);
}

.flex-shrink-1 {
    @include flex-shrink(1);
}

// Order
@for $i from 0 through 5 {
    .order-#{$i} {
        order: #{$i};
    }
}

@each $breakpoint, $value in $breakpoints {
    @if $value >0 {
        @include media-breakpoint-up($breakpoint) {
            @for $i from 0 through 5 {
                .order-#{$breakpoint}-#{$i} {
                    order: #{$i};
                }
            }
        }
    }
}

// Spacing
@each $prop, $abbrev in (margin: m, padding: p) {
    @each $size, $length in (0: 0, 1: 0.25rem, 2: 0.5rem, 3: 1rem, 4: 1.5rem, 5: 3rem) {
        .#{$abbrev}-#{$size} {
            #{$prop}: #{$length} !important;
        }

        .#{$abbrev}t-#{$size},
        .#{$abbrev}y-#{$size} {
            #{$prop}-top: #{$length} !important;
        }

        .#{$abbrev}r-#{$size},
        .#{$abbrev}x-#{$size} {
            #{$prop}-right: #{$length} !important;
        }

        .#{$abbrev}b-#{$size},
        .#{$abbrev}y-#{$size} {
            #{$prop}-bottom: #{$length} !important;
        }

        .#{$abbrev}l-#{$size},
        .#{$abbrev}x-#{$size} {
            #{$prop}-left: #{$length} !important;
        }
    }
}

// Position
.position-static {
    position: static !important;
}

.position-relative {
    position: relative !important;
}

.position-absolute {
    position: absolute !important;
}

.position-fixed {
    position: fixed !important;
}

.position-sticky {
    position: sticky !important;
}

// Top, Right, Bottom, Left
@for $i from 0 through 5 {
    .top-#{$i} {
        top: #{$i * 0.25}rem !important;
    }

    .right-#{$i} {
        right: #{$i * 0.25}rem !important;
    }

    .bottom-#{$i} {
        bottom: #{$i * 0.25}rem !important;
    }

    .left-#{$i} {
        left: #{$i * 0.25}rem !important;
    }
}

// Width & Height
.w-25 {
    width: 25% !important;
}

.w-50 {
    width: 50% !important;
}

.w-75 {
    width: 75% !important;
}

.w-100 {
    width: 100% !important;
}

.w-auto {
    width: auto !important;
}

.h-25 {
    height: 25% !important;
}

.h-50 {
    height: 50% !important;
}

.h-75 {
    height: 75% !important;
}

.h-100 {
    height: 100% !important;
}

.h-auto {
    height: auto !important;
}

.mw-100 {
    max-width: 100% !important;
}

.mh-100 {
    max-height: 100% !important;
}

// Min Viewport Height
.min-vh-100 {
    min-height: 100vh !important;
}

// Viewport Width & Height
.vw-100 {
    width: 100vw !important;
}

.vh-100 {
    height: 100vh !important;
}

// Text
.text-start {
    text-align: left !important;
}

.text-end {
    text-align: right !important;
}

.text-center {
    text-align: center !important;
}

.text-justify {
    text-align: justify !important;
}

.text-lowercase {
    text-transform: lowercase !important;
}

.text-uppercase {
    text-transform: uppercase !important;
}

.text-capitalize {
    text-transform: capitalize !important;
}

.text-wrap {
    white-space: normal !important;
}

.text-nowrap {
    white-space: nowrap !important;
}

.text-break {
    word-wrap: break-word !important;
    word-break: break-word !important;
}

// Font Weight
.fw-light {
    font-weight: var(--font-weight-light) !important;
}

.fw-normal {
    font-weight: var(--font-weight-normal) !important;
}

.fw-medium {
    font-weight: var(--font-weight-medium) !important;
}

.fw-semibold {
    font-weight: var(--font-weight-semibold) !important;
}

.fw-bold {
    font-weight: var(--font-weight-bold) !important;
}

.fw-extrabold {
    font-weight: var(--font-weight-extrabold) !important;
}

// Font Size
.fs-1 {
    font-size: calc(1.375rem + 1.5vw) !important;
}

.fs-2 {
    font-size: calc(1.325rem + 0.9vw) !important;
}

.fs-3 {
    font-size: calc(1.3rem + 0.6vw) !important;
}

.fs-4 {
    font-size: calc(1.275rem + 0.3vw) !important;
}

.fs-5 {
    font-size: 1.25rem !important;
}

.fs-6 {
    font-size: 1rem !important;
}

// Line Height
.lh-1 {
    line-height: 1 !important;
}

.lh-sm {
    line-height: var(--line-height-sm) !important;
}

.lh-base {
    line-height: var(--line-height-base) !important;
}

.lh-lg {
    line-height: var(--line-height-lg) !important;
}

// Text Color
@each $color, $value in (primary: var(--primary),
    secondary: var(--secondary),
    success: var(--success),
    danger: var(--danger),
    warning: var(--warning),
    info: var(--info),
    light: var(--light),
    dark: var(--dark),
    "white": var(--white),
    muted: var(--gray-600)) {
    .text-#{$color} {
        color: #{$value} !important;
    }
}

// Background Color
@each $color, $value in (primary: var(--primary),
    secondary: var(--secondary),
    success: var(--success),
    danger: var(--danger),
    warning: var(--warning),
    info: var(--info),
    light: var(--light),
    dark: var(--dark),
    "white": var(--white),
    "transparent": transparent) {
    .bg-#{$color} {
        background-color: #{$value} !important;
    }
}

// Border
.border {
    border: 1px solid var(--gray-300) !important;
}

.border-0 {
    border: 0 !important;
}

.border-top {
    border-top: 1px solid var(--gray-300) !important;
}

.border-end {
    border-right: 1px solid var(--gray-300) !important;
}

.border-bottom {
    border-bottom: 1px solid var(--gray-300) !important;
}

.border-start {
    border-left: 1px solid var(--gray-300) !important;
}

// Border Width
.border-1 {
    border-width: 1px !important;
}

.border-2 {
    border-width: 2px !important;
}

.border-3 {
    border-width: 3px !important;
}

.border-4 {
    border-width: 4px !important;
}

.border-5 {
    border-width: 5px !important;
}

// Border Color
@each $color, $value in (primary: var(--primary),
    secondary: var(--secondary),
    success: var(--success),
    danger: var(--danger),
    warning: var(--warning),
    info: var(--info),
    light: var(--light),
    dark: var(--dark),
    "white": var(--white)) {
    .border-#{$color} {
        border-color: #{$value} !important;
    }
}

// Border Radius
.rounded {
    @include border-radius(var(--border-radius));
}

.rounded-0 {
    @include border-radius(0);
}

.rounded-1 {
    @include border-radius(var(--border-radius-sm));
}

.rounded-2 {
    @include border-radius(var(--border-radius));
}

.rounded-3 {
    @include border-radius(var(--border-radius-lg));
}

.rounded-4 {
    @include border-radius(var(--border-radius-xl));
}

.rounded-circle {
    @include border-radius(50%);
}

.rounded-pill {
    @include border-radius(50rem);
}

.rounded-top {
    @include border-top-radius(var(--border-radius));
}

.rounded-end {
    @include border-right-radius(var(--border-radius));
}

.rounded-bottom {
    @include border-bottom-radius(var(--border-radius));
}

.rounded-start {
    @include border-left-radius(var(--border-radius));
}

// Shadow
.shadow-sm {
    @include box-shadow(var(--shadow-sm));
}

.shadow {
    @include box-shadow(var(--shadow));
}

.shadow-lg {
    @include box-shadow(var(--shadow-lg));
}

.shadow-none {
    @include box-shadow(none);
}

// Opacity
@for $i from 0 through 10 {
    .opacity-#{$i} {
        opacity: #{math.div($i, 10)} !important;
    }
}

// Overflow
.overflow-auto {
    overflow: auto !important;
}

.overflow-hidden {
    overflow: hidden !important;
}

.overflow-visible {
    overflow: visible !important;
}

.overflow-scroll {
    overflow: scroll !important;
}

.overflow-x-auto {
    overflow-x: auto !important;
}

.overflow-x-hidden {
    overflow-x: hidden !important;
}

.overflow-x-visible {
    overflow-x: visible !important;
}

.overflow-x-scroll {
    overflow-x: scroll !important;
}

.overflow-y-auto {
    overflow-y: auto !important;
}

.overflow-y-hidden {
    overflow-y: hidden !important;
}

.overflow-y-visible {
    overflow-y: visible !important;
}

.overflow-y-scroll {
    overflow-y: scroll !important;
}

// Visibility
.visible {
    visibility: visible !important;
}

.invisible {
    visibility: hidden !important;
}

// Cursor
.cursor-pointer {
    cursor: pointer !important;
}

.cursor-default {
    cursor: default !important;
}

.cursor-not-allowed {
    cursor: not-allowed !important;
}

// User Select
.user-select-all {
    user-select: all !important;
}

.user-select-auto {
    user-select: auto !important;
}

.user-select-none {
    user-select: none !important;
}

// Pointer Events
.pe-none {
    pointer-events: none !important;
}

.pe-auto {
    pointer-events: auto !important;
}

// Resize
.resize-none {
    resize: none !important;
}

.resize-both {
    resize: both !important;
}

.resize-horizontal {
    resize: horizontal !important;
}

.resize-vertical {
    resize: vertical !important;
}